import numpy as np
def f(x, n):
    if x == 0:
        return 0.0  # lim_{x->0+} x^n * ln(x) = 0 для n > 0
    return x**n * np.log(x)
def simpson_integral(a, b, n, eps=1e-6):
    otrezki = 2  # Начальное количество отрезков
    integral_prev = 0.0
    error = eps + 1  # Инициализация ошибки
    while error > eps:
        h = (b - a) / otrezki
        integral_current = 0.0
        for i in range(otrezki):
            x0 = a + i * h
            x1 = x0 + h / 2
            x2 = x0 + h
            # Избегаем деления на ноль и log(0)
            x0 = max(x0, 1e-15)
            x1 = max(x1, 1e-15)
            x2 = max(x2, 1e-15)
            # Формула Симпсона для текущего отрезка
            integral_current += (f(x0, n) + 4 * f(x1, n) + f(x2, n)) * h / 6
        # Оценка погрешности по правилу Рунге
        if otrezki > 2:
            error = abs(integral_current - integral_prev) / 15
        integral_prev = integral_current
        otrezki *= 2  # Удваиваем количество отрезков
    return integral_current
# Ввод параметров
n = int(input("Введите значение n: "))
a, b = 0.0, 1.0
eps = 1e-6

# Вычисление интеграла
result = simpson_integral(a, b, n, eps)

# Вывод результата
print(f"Значение интеграла: {result:.10f}")
